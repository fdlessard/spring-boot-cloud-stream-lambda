plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'    // optional, for IntelliJ IDEA project
}

group = 'io.fdlessard.cotebites.cloud.stream.api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2020.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok:'
    testImplementation 'org.projectlombok:lombok'
    testImplementation 'org.apache.commons:commons-lang3:3.9'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.5.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

compileJava {
    options.compilerArgs += ['-Xlint:all']
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.compilerArgs += ['-Xlint:all']
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
        events 'passed', "skipped", 'failed', 'standardError', 'standardOut'
    }
    reports {
        junitXml.enabled = true
        junitXml.outputLocation = file("build/test-results/unitTest")
        html.enabled = true
        html.destination = file("build/reports/tests/unitTest")
        binaryResultsDirectory = file("build/test-results/unitTest/binary")
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nUnit Test result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

